"""
96、不同的二叉搜索树
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
"""
"""
二叉搜索树 ：左子节点<根节点<右子节点

辅助理解：
    G(n) :以 1 ... n 为节点组成的二叉搜索树的种数
    F(i,n)表示以i（1~n）为根节点的二叉搜索树的种数
        G(n) 为分别以i（1~n）为根节点的二叉树种数的和
        F(i,n)为 i为根节点 1~i-1为左左子树、i+1~n为右子树,
        又因为G(n) 只与树的长度有关
        所以：F(i,n) = G(i-1)*G(n-i)
        所以可求G(n) G(i-1)*G(n-i) 以i（1~n）的和
    
    
        
动态规划：
    问题可以分解成较小规模的子问题，且含有重复计算的子问题：所以dp
    1、定义数组的含义：dp[n]表示从1到N为节点组成的二叉搜索树的种数
    2、找出数组元素之间的关系式:dp[n] = dp[i-1]*dp[n-i]求和
    3、找出初始值 dp[0] = 1 dp[1] = 1
    考虑空树的情况
"""

class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[0], dp[1] = 1, 1
        for i in range(2,n+1):
            for j in range(1,i+1):  # 考虑一边为空树的情况
                dp[i] += dp[j-1]*dp[i-j]
        return dp[-1]