"""
62、不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
问总共有多少条不同的路径？
说明：m 和 n 的值均不超过 100。
示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
示例 2:
输入: m = 7, n = 3
输出: 28
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-paths
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
"""
动态规划：
	1、定义数组dp[i][j]含义: 到达网格位置（i, j）有几条不同的路径
	2、找出数组元素之间的关系式 dp[i][j]= dp[i-1][j] + dp[i][j-1]
		到达位置（i, j）有两种方式：
			一种是从位置（i-1, j）向下移动一步
			一种是从位置（i, j-1）向右移动一步
	3、找出初始值：
		i=0 只能一直向右走 dp[0][:] = 1
		j=0只能一直向下走 dp[:][0] = 1
为了方便实现第一行第一列为1，干脆初始化数组为全一数组（或者全0，最后加1）
改进：一维数组
    每一个位置的dp值只来源于左一格和上一格，可以压缩为1维数组：
    d[j] = d[j] + d[j-1] 
    每次更新一行，还未计算前的d[j]表示上一行该位置的值，d[j-1] 则是当前行的值
    重复以上计算过程m次即可
"""
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1]*n for i in range(m)]
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]
