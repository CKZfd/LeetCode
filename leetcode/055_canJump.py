"""
55、跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。
示例 1:
输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1,
然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:
输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jump-game
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
"""
贪心算法：
    尽可能跳到最远位置，
    如果能达到某个位置，则一定能达到它前面的所有位置，
    如果不能达到某个位置，则后续位置姐不可到达
如果数组中大数不含0：必定能到达
影响因子：0
    前面所有点都跳不到0后面的点（前面的点怎么跳，都落入0的位置）
    前面任意点的值都不超过其与0点的距离
    反向遍历：找到0
"""
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        max_len = 0
        for i, jump in enumerate(nums):
            if i > max_len:
                return False
            elif max_len < i+jump: # 必须是能达到i的才。。
                max_len = i + jump
        return max_len >= i

